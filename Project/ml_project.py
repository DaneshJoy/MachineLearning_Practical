# -*- coding: utf-8 -*-
"""ml_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xGAB57dlDxRs3wzgTEsb-xin8FpMSazr

# Biomedical Signal Analysis
```
  __  __ _        _____           _           _   
 |  \/  | |      |  __ \         (_)         | |  
 | \  / | |      | |__) | __ ___  _  ___  ___| |_
 | |\/| | |      |  ___/ '__/ _ \| |/ _ \/ __| __|
 | |  | | |____  | |   | | | (_) | |  __/ (__| |_
 |_|  |_|______| |_|   |_|  \___/| |\___|\___|\__|
                                _/ |              
                               |__/               
```
"""

!pip install -qq wfdb

import os
import wfdb
import zipfile
import requests
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt
# Add other required imports here

"""## Download the EMG data"""

url = "https://physionet.org/content/emgdb/get-zip/1.0.0/"
zip_file = "emgdb.zip"
if not os.path.exists(zip_file):
    response = requests.get(url)
    with open(zip_file, "wb") as f:
        f.write(response.content)

extract_path = "emgdb"
if not os.path.exists(extract_path):
    with zipfile.ZipFile(zip_file, "r") as zip_ref:
        zip_ref.extractall(extract_path)

"""## Signal Processing"""

def bandpass_filter(signal, lowcut=20, highcut=450, fs=1000, order=4):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(order, [low, high], btype='band')
    return filtfilt(b, a, signal)

"""## Feature Extraction"""

def extract_features(segment):
    return [
        np.mean(np.abs(segment)),         # MAV
        np.sqrt(np.mean(segment**2)),     # RMS
        np.var(segment),                  # Variance
        ((segment[:-1] * segment[1:]) < 0).sum()  # Zero crossings
    ]

"""## Load and Prepare the Data"""

classes = {
    "emg_healthy": 0,
    "emg_myopathy": 1,
    "emg_neuropathy": 2
}
class_names = ["Healthy", "Myopathy", "Neuropathy"]

X, y = [], []
window_size = int(0.2 * 1000)  # 200 ms
step_size = window_size // 2

for folder, label in classes.items():
    subject_path = os.path.join(
        extract_path, "examples-of-electromyograms-1.0.0", folder
    )
    record = wfdb.rdrecord(subject_path)
    signals = record.p_signal
    fs = record.fs

    # Filter all channels
    signals_filt = np.array([bandpass_filter(ch, fs=fs) for ch in signals.T]).T

    # --- Plot for inspection (first channel, first few seconds) ---
    t = np.arange(len(signals)) / fs
    plt.figure(figsize=(7, 3))
    plt.plot(t[:2000], signals[:2000, 0], 'c--', label="Raw", alpha=0.7)
    plt.plot(t[:2000], signals_filt[:2000, 0], 'm', label="Filtered", alpha=0.7)
    plt.title(f"Example EMG Signal ({class_names[label]}) - Channel 1")
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude (mV)")
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Extract features for classification
    for start in range(0, signals_filt.shape[0] - window_size, step_size):
        window = signals_filt[start:start+window_size, :]
        features = []
        for ch in range(window.shape[1]):
            features.extend(extract_features(window[:, ch]))
        X.append(features)
        y.append(label)

X = np.array(X)
y = np.array(y)

"""## Classification

### 1. Data Preparation
"""

# --- Prepare the train/test split here ---

"""### 2. Design and Train the Pipeline"""

# --- Define the classification model/pipeline here ---

# --- Train your model/pipeline here ---

"""### 3. Evaluation"""

# --- Predict the test set ---

# --- Create reports/plots for evaluation ---